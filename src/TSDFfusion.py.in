

#
#
# Tariq Abuhashim
# t.abuhashim@gmail.com
# Aug, 2019
#
#

#!/usr/bin/env python

import sys
sys.path.append("@TSDF_FUSION_PYTHON_DIR@")

import numpy as np
import cv2
import time
import fusion

cam_intr = np.array([[535.4,0.0,320.1],[0.0,539.2,247.6],[0.0,0.0,1.0]])

vol_bnds = np.zeros((3,2))
vol_bnds[:,0] = [0,0,0]
vol_bnds[:,1] = [10,10,10]

# Initialize voxel volume
#print("Initializing voxel volume...")
tsdf_vol = fusion.TSDFVolume(vol_bnds,voxel_size=0.02)

def Integrate(color_image, depth_im, cam_pose):

   # fuse RGB-D images
   t0_elapse = time.time()

   # Read RGB-D image and camera pose
   #color_image = cv2.cvtColor(cv2.imread("data/frame-%06d.color.jpg"%(i)),cv2.COLOR_BGR2RGB)
   #depth_im = cv2.imread("data/frame-%06d.depth.png"%(i),-1).astype(float)/1000. # depth is saved in 16-bit PNG in mm
   #depth_im[depth_im == 65.535] = 0 # set invalid depth to 0 (specific to 7-scenes dataset)
   #cam_pose = np.loadtxt("data/frame-%06d.pose.txt"%(i)) # 4x4 rigid transformation matrix

   # Integrate observation into voxel volume (assume color aligned with depth)
   tsdf_vol.integrate(color_image,depth_im,cam_intr,cam_pose,obs_weight=1.)

   fps = n_imgs/(time.time()-t0_elapse)
   print("Average FPS: %.2f"%(fps))

def SaveMesh(file_name):

   # Get mesh from voxel volume and save to disk (can be viewed with Meshlab)
   print("Saving to " + file_name + " ... ")
   verts,faces,norms,colors = tsdf_vol.get_mesh()
   fusion.meshwrite("mesh.ply",verts,faces,norms,colors)
